---
# These tasks ensure that the encrypted luks container is created.

- fail: msg="Variable crypt_file is required"
  when: crypt_file is undefined

- fail: msg="Variable crypt_size is required"
  when: crypt_size is undefined

- fail: msg="Variable crypt_dir is required"
  when: crypt_dir is undefined

- fail: msg="Variable crypt_pass is required"
  when: crypt_pass is undefined

- name: Register encrypted_dir var
  stat: path={{ crypt_file }} get_md5=false get_checksum=false
  register: crypt_file_stat

- name: Create the file to be used for encryption
  command: fallocate -l {{ crypt_size }} {{ crypt_file }}
  when: crypt_file_stat.stat.exists == False

- name: Create the LUKS container inside the file
  command: echo "{{ crypt_pass }}" | cryptsetup --verbose --batch-mode luksFormat {{ crypt_file }}
  when: crypt_file_stat.stat.exists == False

- name: Open the LUKS container
  command: echo "{{ crypt_pass }}" | cryptsetup luksOpen {{ crypt_file }} encrypted
  when: crypt_file_stat.stat.exists == False

- name: Format and create the filesystem
  command: mkfs.ext4 -j /dev/mapper/encrypted
  when: crypt_file_stat.stat.exists == False

- name: Ensure encrypted dir exists
- file: path={{ crypt_dir }} state=directory
  when: crypt_file_stat.stat.exists == False

- name: Mount crypt device to encrypted dir
  file: path={{ crypt_dir }} src=/dev/mapper/encrypted state=present
  when: crypt_file_stat.stat.exists == False

#- name: Close the LUKS container
#  command: cryptsetup luksClose encrypted
#  when: crypt_file_stat.stat.exists == False
